version: '3.8'
services:

  ai-server:
    build:
      context: .
      dockerfile: /bot/Dockerfile
      args:
        AI_PORT: ${AI_PORT}
        OPENAI_API_KEY: ${OPENAI_API_KEY}
        HOST: ${HOST}

    ports:
      - ${AI_PORT}:${AI_PORT}
    env_file:
      - .env
    networks:
      my-network:
        ipv4_address: 192.168.1.100
    restart: on-failure

  app-server:
    build:
      context: .
      dockerfile: /app/Dockerfile
      args:
        APP_PORT: ${APP_PORT}
        HOST: ${HOST}

    ports:
      - ${APP_PORT}:${APP_PORT}
    env_file:
      - .env
    networks:
      my-network:
        ipv4_address: 192.168.1.101
    restart: on-failure

  tests:
    build:
      context: .
      dockerfile: /tests/Dockerfile
    env_file:
      - .env
    networks:
      my-network:
        ipv4_address: 192.168.1.102
    volumes:
      - shared_tests:/tests

  jenkins:
    image: jenkins/jenkins:latest
    privileged: true
    user: root
    ports:
      - ${JENKINS_PORT}:8080
    env_file:
      - .env
    container_name: jenkins
    volumes:
      - "/home/${myname}/jenkins_compose/jenkins_configuration:/var/jenkins_home"
      - "/var/run/docker.sock:/var/run/docker.sock"
    networks:
      my-network:
        ipv4_address: 192.168.1.103

  sonarqube:
    image: sonarqube:lts-community
    depends_on:
      - sonar_db
    environment:
      SONAR_JDBC_URL: jdbc:postgresql://sonar_db:5432/sonar
      SONAR_JDBC_USERNAME: sonar
      SONAR_JDBC_PASSWORD: sonar
    env_file:
      - .env
    ports:
      - ${SONARQUBE_PORT}:9000
    volumes:
      - sonarqube_conf:/opt/sonarqube/conf
      - sonarqube_data:/opt/sonarqube/data
      - sonarqube_extensions:/opt/sonarqube/extensions
      - sonarqube_logs:/opt/sonarqube/logs
      - sonarqube_temp:/opt/sonarqube/temp
    networks:
      my-network:
        ipv4_address: 192.168.1.104

  sonar_db:
    image: postgres:13
    environment:
      POSTGRES_USER: sonar
      POSTGRES_PASSWORD: sonar
      POSTGRES_DB: sonar
    volumes:
      - sonar_db:/var/lib/postgresql
      - sonar_db_data:/var/lib/postgresql/data
    networks:
      my-network:
        ipv4_address: 192.168.1.105

  allure-server:
    image: "frankescobar/allure-docker-service"
    environment:
      CHECK_RESULTS_EVERY_SECONDS: NONE
      KEEP_HISTORY: 1
      KEEP_HISTORY_LATEST: 25
    ports:
      - ${ALLURE_SERVER}:5050
    volumes:
      - ${PWD}/tests/shared_tests:/tests
    networks:
      my-network:
        ipv4_address: 192.168.1.106
    depends_on:
      tests:
        condition: service_completed_successfully
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:${ALLURE_SERVER}/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    restart: on-failure

  allure-ui:
    image: "frankescobar/allure-docker-service-ui"
    environment:
      ALLURE_DOCKER_PUBLIC_API_URL: "http://localhost:${ALLURE_SERVER}/"
    ports:
      - ${ALLURE_UI}:5252
    networks:
      my-network:
        ipv4_address: 192.168.1.107
    depends_on:
      ai-server:
        condition: service_healthy

networks:
  my-network:
    driver: bridge
    ipam:
      config:
        - subnet: 192.168.1.0/24

volumes:
  sonarqube_conf:
  sonarqube_data:
  sonarqube_extensions:
  sonarqube_logs:
  sonarqube_temp:
  sonar_db:
  sonar_db_data:
  shared_tests: