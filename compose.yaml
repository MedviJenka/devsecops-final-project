services:

  ai-server:
    image: ai-server-image
    build:
      context: .
      dockerfile: /bot/Dockerfile
      args:
        AI_PORT: ${AI_PORT}
        OPENAI_API_KEY: ${OPENAI_API_KEY}
    ports:
      - ${AI_PORT}:${AI_PORT}
    env_file:
      - .env
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://${AI_SERVER_PRIVATE_IP}:{AI_PORT}/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: on-failure
    networks:
      my-network:
        ipv4_address: ${AI_SERVER_PRIVATE_IP}

  app-server:
    image: app-server-image
    build:
      context: .
      dockerfile: /app/Dockerfile
      args:
        APP_PORT: ${APP_PORT}
        HOST: ${HOST}
    ports:
      - ${APP_PORT}:${APP_PORT}
    env_file:
      - .env
    networks:
      my-network:
        ipv4_address: ${APP_SERVER_PRIVATE_IP}
    restart: on-failure

  tests:
    image: tests-image
    build:
      dockerfile: /tests/Dockerfile
    env_file:
      - .env
    ports:
      - ${TESTS_PORT}:${TESTS_PORT}
    networks:
      my-network:
        ipv4_address: ${TESTS_PRIVATE_IP}
    volumes:
      - ${PWD}/allure-results:/tests/allure-results
    depends_on:
      - ai-server
      - app-server
      - jenkins
      - nginx
      - sonar_db
      - sonarqube

  jenkins:
    image: jenkins/jenkins:latest
    privileged: true
    user: root
    ports:
      - ${JENKINS_PORT}:8080
    env_file:
      - .env
    container_name: jenkins
    volumes:
      - "/home/jenkins_compose/jenkins_configuration:/var/jenkins_home"
      - "/var/run/docker.sock:/var/run/docker.sock"
      - .:/app
    environment:
      - JAVA_OPTS=-Djenkins.install.runSetupWizard=false
    networks:
      my-network:
        ipv4_address: ${JENKINS_PRIVATE_IP}

  sonarqube:
    image: sonarqube:lts-community
    environment:
      SONAR_JDBC_URL: jdbc:postgresql://sonar_db:5432/sonar
      SONAR_JDBC_USERNAME: sonar
      SONAR_JDBC_PASSWORD: sonar
    env_file:
      - .env
    ports:
      - ${SONARQUBE_PORT}:9000
    volumes:
      - sonarqube_conf:/opt/sonarqube/conf
      - sonarqube_data:/opt/sonarqube/data
      - sonarqube_extensions:/opt/sonarqube/extensions
      - sonarqube_logs:/opt/sonarqube/logs
      - sonarqube_temp:/opt/sonarqube/temp
    networks:
      my-network:
        ipv4_address: ${SONARQUBE_PRIVATE_IP}
    depends_on:
      - sonar_db

  sonar_db:
    image: postgres:13
    environment:
      POSTGRES_USER: sonar
      POSTGRES_PASSWORD: sonar
      POSTGRES_DB: sonar
    ports:
      - ${SONAR_DB_PORT}:${SONAR_DB_PORT}
    volumes:
      - sonar_db:/var/lib/postgresql
      - sonar_db_data:/var/lib/postgresql/data
    networks:
      my-network:
        ipv4_address: ${SONAR_DB_PRIVATE_IP}

  allure-server:
    image: "frankescobar/allure-docker-service"
    environment:
      CHECK_RESULTS_EVERY_SECONDS: NONE
      KEEP_HISTORY: 1
      KEEP_HISTORY_LATEST: 25
    ports:
      - "${ALLURE_SERVER_PORT}:5050"
    volumes:
      - ${PWD}/allure-results:/tests/allure-results
    networks:
      my-network:
        ipv4_address: ${ALLURE_SERVER_PRIVATE_IP}

  nginx:
    image: nginx:latest
    ports:
      - ${NGINX_PORT}:80
    environment:
      - AI_SERVER_PRIVATE_IP=${AI_SERVER_PRIVATE_IP}
      - AI_PORT=${AI_PORT}
      - APP_SERVER_PRIVATE_IP=${APP_SERVER_PRIVATE_IP}
      - APP_PORT=${APP_PORT}

# TODO: update nginx.conf with working functionality
    volumes:
      - ./infra/nginx.conf:/etc/nginx/nginx.conf
      - ./infra/nginx.conf:/etc/nginx/conf.d/default.conf
    networks:
      my-network:
        ipv4_address: ${NGINX_PRIVATE_IP}
    depends_on:
      - ai-server

networks:
  my-network:
    driver: bridge
    ipam:
      config:
        - subnet: 192.168.1.0/24

volumes:

  # sonar DB
  sonarqube_conf:
  sonarqube_data:
  sonarqube_extensions:
  sonarqube_logs:
  sonarqube_temp:
  sonar_db:
  sonar_db_data:

  # shared folders
  shared_tests:
